#include <iostream>
using namespace std;
class BST {
	int data;
	BST *left, *right;
public:
	BST(){
	data=0;
	left =NULL ;
	right =NULL;
}
	BST(int value)
{
	data = value;
	left = right = NULL;
}
	// Insert function.
	BST* Insert(BST*, int);
	// delete function.
	BST* deleteNode(BST*, int);
	//Search function.
	int search(BST*, int);
	// Inorder traversal.
	void Inorder(BST*);
};

BST* BST::Insert(BST* root, int value)
{
	if (root == NULL) {
		// Insert the first node, if root is NULL.
		return new BST(value);
	}

	if (value > root->data) {
		// Insert right node data, if the 'value'
		// to be inserted is greater than 'root' node data.

		// Process right nodes.
		root->right = Insert(root->right, value);
	}
	else if (value < root->data) {
		// Insert left node data, if the 'value'
		// to be inserted is smaller than 'root' node data.

		// Process left nodes.
		root->left = Insert(root->left, value);
	}
	return root;    }


	int BST::search (BST * root, int value)
{
  while (root != NULL)
    {
      if (value > root->data)
	root = root->right;

      else if (value < root->data)
	root = root->left;

      else
	return 1;
    }

  return 0;
}


BST* BST::deleteNode(BST* root, int k)
{
    // Base case
    if (root == NULL)
        return root;

    // Recursive calls for ancestors of
    // node to be deleted
    if (root->data > k) {
        root->left = deleteNode(root->left, k);
        return root;
    }
    else if (root->data < k) {
        root->right = deleteNode(root->right, k);
        return root;
    }

    // We reach here when root is the node
    // to be deleted.

    // If one of the children is empty
    if (root->left == NULL) {
        BST* temp = root->right;
        delete root;
        return temp;
    }
    else if (root->right == NULL) {
        BST* temp = root->left;
        delete root;
        return temp;
    }

    // If both children exist
    else {

        BST* succParent = root;

        // Find successor
        BST* succ = root->right;
        while (succ->left != NULL) {
            succParent = succ;
            succ = succ->left;
        }

        // Delete successor.  Since successor
        // is always left child of its parent
        // we can safely make successor's right
        // right child as left of its parent.
        // If there is no succ, then assign
        // succ->right to succParent->right
        if (succParent != root)
            succParent->left = succ->right;
        else
            succParent->right = succ->right;

        // Copy Successor Data to root
        root->data = succ->data;

        // Delete Successor and return root
        delete succ;
        return root;
    }
}
// Inorder traversal function.

// This gives data in sorted order.
void BST::Inorder(BST* root)
{
	if (root == NULL) {
		return;
	}
	Inorder(root->left);
	cout << root->data << " ";
	Inorder(root->right);
}

int main()
{
	BST b, *root = NULL;
	root = b.Insert(root, 50);
	b.Insert(root, 30);  b.Insert(root, 20);
	b.Insert(root, 40);
	b.Insert(root, 70);
	b.Insert(root, 60);
	b.Insert(root, 80);

	b.Inorder(root);
	cout<< "Searching for element 15 \n";
    cout << b.search (root, 15);

     cout<<"\n\nDelete a Leaf Node: 20\n";
    root = b.deleteNode(root, 20);
    cout<<"Modified BST tree after deleting Leaf Node:\n";
    b.Inorder(root);

    cout<<"\n\nDelete Node with single child: 70\n";
    root = b.deleteNode(root, 70);
    cout<<"Modified BST tree after deleting single child Node:\n";
    b.Inorder(root);

    cout<<"\n\nDelete Node with both child: 50\n";
    root = b.deleteNode(root, 50);
    cout<<"Modified BST tree after deleting both child Node:\n";
    b.Inorder(root);
    return 0;
}

